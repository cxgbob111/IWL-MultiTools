"""inputs.py v6.0 – 侧边栏输入控件，按功能区折叠显示。"""

import streamlit as st
from utils.param_metadata import param_info, get_param_help


def sidebar_inputs() -> dict:
    """生成侧边栏输入控件并返回参数字典。"""
    params: dict = {}
    st.sidebar.markdown("**版本号：V6.0 - 2025-08-05**")
    # 船型开关与补贴
    with st.sidebar.expander("⚙️ 船型开关与补贴设置", expanded=False):
        params['show_stage_v'] = st.checkbox("STAGE V 柴油船 (EU)", True, key="show_stage_v"); params['show_electric_eu'] = st.checkbox("电动船 (EU)", True, key="show_electric_eu"); params['show_electric_cn'] = st.checkbox("电动船 (CN)", True, key="show_electric_cn"); params['subsidy_ratio_stage_v'] = st.slider("STAGE V 补贴比例 (%)", 0.0, 0.5, 0.2, 0.01, key="subsidy_ratio_stage_v"); params['subsidy_ratio_electric_eu'] = st.slider("电动船(EU)补贴比例 (%)", 0.0, 0.5, 0.3, 0.01, key="subsidy_ratio_electric_eu"); params['subsidy_ratio_electric_cn'] = st.slider("电动船(CN)补贴比例 (%)", 0.0, 0.5, 0.3, 0.01, key="subsidy_ratio_electric_cn")
    # 船舶与物流参数
    with st.sidebar.expander("🚢 船舶与物流参数", expanded=False):
        fields=[('ship_length','船长 (m)',30.0,135.0,1.0),('carry_per_meter','每米船长平均载货量 (吨/m)',5.0,20.0,0.5),('avg_trip_distance','平均单程航距 (km)',10.0,300.0,1.0),('economic_speed','经济航速 (km/h)',5.0,25.0,0.1),('turnaround_time','装卸及等候时间 (h)',0.0,24.0,0.5),('annual_hours','年度运营小时数',0.0,8760.0,100.0),('crew_num','船员数',1.0,100.0,1.0),('crew_avg_cost','单名船员年平均成本 (€)',0.0,200000.0,1000.0)]
        for k,l,min_v,max_v,step in fields:
            params[k]=st.number_input(l, value=float(param_info.get(k, {}).get('default', 0.0)), min_value=min_v, max_value=max_v, step=step, key=k, help=get_param_help(k))
    # 能源参数
    with st.sidebar.expander("⚡ 能源参数", expanded=False):
        params['mgo_price']=st.slider("柴油价格 (€/L)", 0.3, 2.0, float(param_info['mgo_price']['default']), 0.01, key='mgo_price', help=get_param_help('mgo_price')); params['electricity_price']=st.slider("电价 (€/kWh)", 0.1, 0.5, float(param_info['electricity_price']['default']), 0.01, key='electricity_price', help=get_param_help('electricity_price')); params['diesel_consumption_per_hour']=st.number_input("柴油耗能 (L/h)", value=float(param_info['diesel_consumption_per_hour']['default']), min_value=50.0, max_value=200.0, step=1.0, key='diesel_consumption_per_hour', help=get_param_help('diesel_consumption_per_hour')); params['electric_consumption_per_hour']=st.number_input("电动耗能 (kWh/h)", value=float(param_info['electric_consumption_per_hour']['default']), min_value=100.0, max_value=500.0, step=1.0, key='electric_consumption_per_hour', help=get_param_help('electric_consumption_per_hour')); hrs=params.get('annual_hours', param_info['annual_hours']['default'])/365.0; daily_diesel=params['diesel_consumption_per_hour']*hrs*params['mgo_price']; daily_electric=params['electric_consumption_per_hour']*hrs*params['electricity_price']; st.metric("柴油船日能源成本 (€)", f"{daily_diesel:,.2f}"); st.metric("电动船日能源成本 (€)", f"{daily_electric:,.2f}")
    # 电池参数
    with st.sidebar.expander("🔋 电池参数", expanded=False):
        params['battery_price']=st.slider("电池单价 (€/kWh)", 200.0, 800.0, float(param_info['battery_price']['default']), 10.0, key='battery_price', help=get_param_help('battery_price')); params['battery_capacity_kWh']=st.number_input("电池容量 (kWh)", value=float(param_info['battery_capacity_kWh']['default']), min_value=500.0, max_value=10000.0, step=10.0, key='battery_capacity_kWh', help=get_param_help('battery_capacity_kWh')); params['battery_cycle_life']=st.number_input("电池深度循环次数", value=float(param_info['battery_cycle_life']['default']), min_value=1000.0, max_value=10000.0, step=100.0, key='battery_cycle_life', help=get_param_help('battery_cycle_life')); params['battery_replace_ratio_eu']=st.slider("EU电池更换成本比率", 0.1, 1.0, float(param_info['battery_replace_ratio_eu']['default']), 0.05, key='battery_replace_ratio_eu', help=get_param_help('battery_replace_ratio_eu')); params['battery_replace_ratio_cn']=st.slider("CN电池更换成本比率", 0.1, 1.0, float(param_info['battery_replace_ratio_cn']['default']), 0.05, key='battery_replace_ratio_cn', help=get_param_help('battery_replace_ratio_cn')); params['battery_replace_cost_eu']=params['battery_capacity_kWh']*params['battery_price']*params['battery_replace_ratio_eu']; params['battery_replace_cost_cn']=params['battery_capacity_kWh']*params['battery_price']*0.7*params['battery_replace_ratio_cn']; st.metric("EU电动船单次换电成本 (€)", f"{params['battery_replace_cost_eu']:,.0f}"); st.metric("CN电动船单次换电成本 (€)", f"{params['battery_replace_cost_cn']:,.0f}")
    # 运维与周期费用
    with st.sidebar.expander("🛠 运维与周期费用", expanded=False):
        params['maintenance_cost_diesel']=st.number_input("柴油船维护 (€/年)", value=float(param_info['maintenance_cost_diesel']['default']), min_value=0.0, max_value=1e6, step=1000.0, key='maintenance_cost_diesel', help=get_param_help('maintenance_cost_diesel')); params['maintenance_cost_electric']=st.number_input("电动船维护 (€/年)", value=float(param_info['maintenance_cost_electric']['default']), min_value=0.0, max_value=1e6, step=1000.0, key='maintenance_cost_electric', help=get_param_help('maintenance_cost_electric')); params['port_fee']=st.number_input("港口费 (仅柴油船, €/年)", value=float(param_info['port_fee']['default']), min_value=0.0, max_value=1e6, step=1000.0, key='port_fee', help=get_param_help('port_fee')); params['overhaul_interval_years_diesel']=st.number_input("柴油船大修周期 (年)", value=float(param_info['overhaul_interval_years_diesel']['default']), min_value=1.0, max_value=25.0, step=1.0, key='overhaul_interval_years_diesel', help=get_param_help('overhaul_interval_years_diesel')); params['overhaul_cost_per_event_diesel']=st.number_input("柴油船单次大修成本 (€)", value=float(param_info['overhaul_cost_per_event_diesel']['default']), min_value=0.0, max_value=1e6, step=1000.0, key='overhaul_cost_per_event_diesel', help=get_param_help('overhaul_cost_per_event_diesel'))
    # 收益与保险设置
    with st.sidebar.expander("💰 收益与保险设置", expanded=False):
        params['unit_income']=st.number_input("单位运费/收益 (€/吨·公里)", value=float(param_info['unit_income']['default']), min_value=0.0, max_value=1.0, step=0.001, key='unit_income', help=get_param_help('unit_income')); params['annual_income']=st.number_input("手动年收入 (€/年)", value=0.0, min_value=0.0, max_value=1e9, step=1000.0, key='annual_income', help="可手动输入年收入，留空或0则自动估算。"); params['insurance_rate']=st.number_input("基础保险费率 (%)", value=5.0, min_value=0.0, max_value=20.0, step=0.1, key='insurance_rate', help="一般保险费率 1%~5%。"); params['insurance_discount']=st.number_input("智能化设备保险优惠 (%)", value=float(param_info.get('insurance_discount',{}).get('default',0.0)), min_value=0.0, max_value=100.0, step=0.1, key='insurance_discount', help=get_param_help('insurance_discount')); params['smart_equipment_selected']=st.checkbox("增加智能化设备 (仅电动船)", value=False, key='smart_equipment_selected', help="选中后电动船保险费按折扣计算")
    # 初期建造成本
    with st.sidebar.expander("🚧 初期建造成本 (单位：10k €)", expanded=False):
        comps=["船体","推进系统","电气自动化","居住区","舾装设备","组装调试"]; defaults={'柴油船':[60.0,25.0,20.0,10.0,8.0,5.0],'电动船(EU)':[60.0,20.0,25.0,10.0,8.0,5.0],'电动船(CN)':[40.0,15.0,15.0,7.0,6.0,3.5]}
        for ship,vals in defaults.items(): params[ship]=[st.number_input(f"{ship}{c} (10k€)", value=v, min_value=0.0, max_value=100.0, step=0.1, key=f"{ship}_{c}", help=get_param_help(f"{ship}_{c}")) for c,v in zip(comps,vals)]
        raw_d=sum(params['柴油船'])*1e4; raw_eu=sum(params['电动船(EU)'])*1e4+params['battery_capacity_kWh']*params['battery_price']; raw_cn=sum(params['电动船(CN)'])*1e4+params['battery_capacity_kWh']*params['battery_price']*0.7; st.metric("STAGE V 柴油船原始建造成本 (€)",f"{raw_d:,.0f}"); st.metric("电动船(EU)原始建造成本 (€)",f"{raw_eu:,.0f}"); st.metric("电动船(CN)原始建造成本 (€)",f"{raw_cn:,.0f}")
    return params